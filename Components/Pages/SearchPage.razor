@page "/search"
@inject YoutubeClient Youtube
@inject HttpClient Http

<TabbedPageView Title="Search" OnSearch="OnSearchResult" @ref="tabPage">

    @if (isInResultMode)
    {
        @if (CompletedSearch)
        {
            @foreach (var audio in Results)
            {
                <MusicTrack Song="audio"></MusicTrack>
            }

        }
        else
        {
            for (int i = 0; i < 15; i++)
            {
                <MusicTrack>

                </MusicTrack>
            }
        }

    }
    else
    {
        @foreach(var option in SearchOptions)
        {
            <Glass Class="searchOption" Clicked="()=>OnLinkClicked(option)">
                <div style="display:flex;margin-left:20px;margin-top:10px;margin-right:10px;align-items:center;justify-content:space-between">
                    <img src="./images/search.svg" width="24" height="24" />
                    <p>@option</p>
                    <img src="./images/link.svg" width="20" height="20"/>
                </div>
            </Glass>
        }

    }
</TabbedPageView>

@code
{
    private List<AudioItem> Results=new List<AudioItem>();
    private bool CompletedSearch = false;
    private const string SearchUrl = "https://clients1.google.com/complete/search?client=youtube&gs_ri=youtube&ds=yt&q=";
    private CancellationTokenSource searchCancellation = new CancellationTokenSource();
    private static SemaphoreSlim SearchSemaphore = new SemaphoreSlim(1,1);
    private List<string> SearchOptions = new List<string>();
    private bool isInResultMode = false;
    private TabbedPageView tabPage;

    private async void OnSearchResult((string,bool) e)
    {
        if (string.IsNullOrWhiteSpace(e.Item1))
            return;

        if(!e.Item2)
        {
            SearchOptions = (await SuggestionsAsync(e.Item1)).ToList();
            StateHasChanged();
            isInResultMode = false;
            return;
        }

        isInResultMode = true;

        if(SearchSemaphore.CurrentCount==0)
        {
            searchCancellation.Cancel();
        }
        await SearchSemaphore.WaitAsync();

        searchCancellation = new CancellationTokenSource();
        CompletedSearch = false;
        Results.Clear();
        int count = 0;
        try
        {
            await foreach (var video in Youtube.Search.GetVideosAsync(e.Item1, searchCancellation.Token))
            {
                if (count > 10)
                    break;

                count++;
                var audioItem = new AudioItem(Video.From(video));
                Results.Add(audioItem);
            }
            CompletedSearch = true;
            StateHasChanged();
        }
        catch
        {

        }
        SearchSemaphore.Release();
    }

    private void OnLinkClicked(string option)
    {
        tabPage.UpdateLastSearch(option);
        OnSearchResult((option, true));
    }

    public async Task<IEnumerable<string>> SuggestionsAsync(string query, CancellationToken token = default)
    {
        var original = query;
        query = Uri.EscapeDataString(query);
        query = SearchUrl + query;
        var res = await Http.GetAsync(query, token);
        var js = await res.Content.ReadAsStringAsync(token);

        var parts = js.Split('[').Where(t => t.Split('"').Length > 2).Select(t => t.Split('"')[1]);

        return parts.Distinct().ToList();
    }
}

    <style>
    .searchOption
    {
        height: 3rem;
        color: white;
        border-radius: 25px;
        margin:12px;
    }
    </style>