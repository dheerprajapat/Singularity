@page "/youtubePlaylist/{Id}"
@inject YoutubeClient Youtube

<TabbedPageView Title="Explore" Padding="0px">
    @if (playlist != null)
    {
            <div style="display:flex;margin-top:20px;flex-direction:column;align-items:center;height:250px">
                <img src="@playlist.Thumbnails.MaxBy(x=>x.Resolution.Area)!.Url"
                style="border-radius:15px;width:200px;height:160px"/>
            <div style="display:flex;flex-direction:column;margin:10px;align-items:flex-start">
                <p style="margin-top:20px;font-weight:bold;font-size:medium;">@playlist.Title</p>
                    <p style="margin-top:20px;font-weight:bold;">@playlist.Author</p>
                </div>
            </div>
        @if(songs!=null)
        {
            foreach (var song in songs)
            {
                <MusicTrack Song="song" />
            }
        }
        else
        {
            for(int i=0;i<20;i++)
            {
                <MusicTrack/>
            }
        }

    }
</TabbedPageView>


@code {
    [Parameter]
    public string Id { get; set; }
    private YoutubeExplode.Playlists.Playlist playlist;
    IEnumerable<AudioItem> songs;
    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
            return;

        playlist = await Youtube.Playlists.GetAsync(Id);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        songs = await FetchSongsOfPlaylist();
        StateHasChanged();
    }
    private async Task<IEnumerable<AudioItem>> FetchSongsOfPlaylist()
    {
        List<AudioItem> res=null;
        await Task.Run(async() =>
        {
            res = new List<AudioItem>();
            await foreach(var pVideo in Youtube.Playlists.GetVideosAsync(Id))
            {
                res.Add(new AudioItem(Video.From(pVideo)));
            }
        });
        return res;
    }
}
