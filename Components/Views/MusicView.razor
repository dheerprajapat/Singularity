@using CommunityToolkit.Maui.Core.Primitives
  @inject AudioManager AudioManager
  @inject IJSRuntime JSRuntime
  @implements IDisposable

@if (Current != null)
{

    <Glass Class="@(isMusicViewActive ? "toggle-music" : "music")" Blur="20" BackgroundColor="rgba(66, 245, 209,0.1)" Border="@BorderMusic">
        @if (isMusicViewActive)
        {
            <div class="toggle-controls" @onclick="ToggleMusicView">
                <img class="cover-image" src="@ThumbnailUrl" />
                <div style="display:flex;align-items:center;color:white;margin-top:40px">
                    <div>
                        <p class="ellepsis"><b>@Current.Video.Title</b></p>
                        <p class="ellepsis">@Current.Video.Author</p>
                    </div>
                    <div @onclick="ToggleLike" @onclick:stopPropagation="true" style="width: 50px;height: 50px;display: flex;justify-content: center;">
                        <img src=@(IsCurrentSongLiked ? "./images/solid-heart.svg" :"./images/heart.svg") height="32" width="32" />
                    </div>
                </div>

                <div style="position:absolute; bottom:60px">
                    <div style="display:flex;width:100%;align-items:center;justify-content:space-between;margin-top:40px">
                        <div>@(TimeSpan.FromSeconds(CurrentTime).ToMusicString())</div>
                        <div>@(TimeSpan.FromSeconds(Duration).ToMusicString())</div>
                    </div>

                    @* <SliderRange Value="@((int)CurrentTime)" Max="@((int)Duration)" Style="width:70vw;padding-left:4px;padding-right:4px"
                    MouseDown="MouseDown" MouseUp="MouseUp"
                    OnChange="OnSliderChange" /> *@

                    <div style="width:70vw;padding-left:4px;padding-right:4px" id="sliderContainer" class="bg-transparent">
                        <input type="range" value="@CurrentTime" max="@((int)Duration)" @onchange="(e)=>OnSliderChange(int.Parse(e.Value.ToString()))"
                        @onmousedown="MouseDown"
                        @onmouseup="MouseUp" @ontouchstart="MouseDown" @ontouchend="MouseUp"
                        @onclick:stopPropagation="true"
                               ValueChanged="(d)=>OnSliderChange(d)"></input>
                    </div>


                    <div style="margin-top:20px;margin-top: 20px;display: flex;width: 100%;justify-content: space-between;" @onclick:stopPropagation="true">
                        <img src="./images/backward.svg" height="32" width="32" @onclick="PlayPrevious"/>
                        @if (IsPlaying)
                        {
                            <img src="./images/pause.svg" height="32" width="32" @onclick="PlayPauseToggle"/>
                        }
                        else
                        {
                            <img src="./images/play.svg" height="32" width="32" @onclick="PlayPauseToggle" />
                        }                        
                        <img src="./images/forward.svg" height="32" width="32" @onclick="PlayNext" />
                    </div>
                </div>
                

            </div>
        }
        else
        {
            <div class="controls" @onclick="ToggleMusicView">
                <img class="img" src="@ThumbnailUrl" />
                <div style="display:flex;flex-direction:column;align-items:flex-start;margin-left:10px;color:white">
                    <p class="ellepsis"><b>@Current.Video.Title</b></p>
                    <p class="ellepsis">@Current.Video.Author</p>
                    <div></div>
                </div>
                @if (IsPlaying)
                {
                    <img src="./images/pause.svg" height="32" width="32" @onclick="PlayPauseToggle" @onclick:stopPropagation="true" />
                }
                else
                {
                    <img src="./images/play.svg" height="32" width="32" @onclick="PlayPauseToggle" @onclick:stopPropagation="true" />
                }
            </div>
            <MudProgressLinear Color="Color.Secondary" Value="@CurrentTime" Max="@Duration" Size="Size.Small" Style="margin-top:-10px;margin-left:80px;margin-right:80px;width:calc(100vw - 160px)" />
        }
    </Glass>
}




@code
{
    private bool isMusicViewActive { get; set; } = false;
    private string BorderMusic =>$"2px solid rgba(255, 0, 0,{(isMusicViewActive?0:0.4)})";

    private bool CanUpdateSlider = true;

    private AudioItem? Current;
    private double CurrentTime;
    private double Duration;
    private string ThumbnailUrl;
    private bool IsPlaying = false;
    private bool IsCurrentSongLiked => UserSetting.Instance.IsLiked(AudioManager.Current!.Video);

    private void ToggleMusicView()
    {
        isMusicViewActive = !isMusicViewActive;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AudioManager.Init();

        AudioManager.Audio.OnMediaStateChange += MediaStateChanged;
        AudioManager.Audio.OnTimeUpdate += OnTimeUpdate;
        AudioManager.Audio.OnLoadedMetadata += OnLoadedMetadata;

        await AudioManager.AddSongAsync("H60L40GbfFI");
        await AudioManager.PlayAsync();
    }


    private async void MediaStateChanged(object sender,MediaStateChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            IsPlaying = AudioManager.IsPlaying;
            StateHasChanged();
        });
    }
    private async void OnLoadedMetadata(object sender)
    {
        await InvokeAsync(() =>
        {
            Current = AudioManager.Current;
            if (Current is not null)
            {
                ThumbnailUrl = Current.Video.Thumbnails.MaxBy(x => x.Resolution.Area)!.Url;
            }

            Duration = AudioManager.Current.Video.Duration.GetValueOrDefault().TotalSeconds;
            StateHasChanged();
        });
    }

    private DateTime LastTime = DateTime.Now;
    private void OnTimeUpdate(object sender)
    {
        if (!CanUpdateSlider || (DateTime.Now-LastTime).TotalSeconds<0.5)
            return;

        LastTime = DateTime.Now;
        InvokeAsync(() =>
        {
            CurrentTime = AudioManager.Audio.CurrentTime.TotalSeconds;
            StateHasChanged();
        });
    }

    private void MouseDown()
    {
        CanUpdateSlider = false;
    }
    private async void MouseUp()
    {
        await Task.Delay(100);
        CanUpdateSlider = true;
    }

    public void Dispose()
    {
        AudioManager.Audio.OnMediaStateChange -= MediaStateChanged;
    }

    private void OnSliderChange(int value)
    {
        AudioManager.Audio.CurrentTime=TimeSpan.FromSeconds(value);
    }

    private async void PlayNext()
    {
        await AudioManager.PlayNextAsync();
    }
    private async void PlayPrevious()
    {
        await AudioManager.PlayPreviousAsync();
    }

    private void PlayPauseToggle()
    {
        if(!AudioManager.IsPlaying)
        {
            AudioManager.Audio.Play();
        }
        else
        {
            AudioManager.Audio.Pause();
        }
    }

    private void ToggleLike()
    {
        if (IsCurrentSongLiked) UserSetting.Instance.RemoveFromLike(AudioManager.Current!.Video);
        else UserSetting.Instance.AddToLike(AudioManager.Current!.Video);
    }
}


<style>
    .ellepsis {
        width: 64vw;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .music {
        height: 86px;
        width: 100%;
        position: absolute;
        bottom: 50px;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        border-color: 1px solid rgba(66, 245, 209,0.5);
        padding: 4px;
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        transition: height 0.5s,bottom 0.5s;
    }

    .toggle-music {
        height: 100vh;
        width: 100%;
        position: absolute;
        bottom: 70px;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        border-color: 1px solid rgba(66, 245, 209,0.5);
        padding: 20px;
        transition: height 0.5s, bottom 0.5s;
    }

    .cover-image {
        height: 50vh;
        width: 50vh;
    }

    .controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .toggle-controls {
        height: 85vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .music-control {
        margin-top: 10px;
        display: flex;
        width: 60%;
        justify-content: space-between;
    }

    .img {
        border-radius: 50%;
        border-color: 1px solid rgba(66, 245, 209,0.5);
        display: flex;
        align-items: center;
        width: 50px;
        height: 50px;
        margin-top: -2px;
        margin-left: 10px;
    }
</style>