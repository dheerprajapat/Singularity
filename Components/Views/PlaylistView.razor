
<Glass Class="playlist-parent" Blur="20" BackgroundColor="rgba(66, 245, 209,0.1)" Border="2px solid rgba(66, 245, 209,1)">

    <div class="playlist-header">
        <div class="add-playlist">
            <span style="color:white;"><b>Add to playlist</b></span>
        </div>
        <div style="position: absolute;right: 45px;">
            @if (!IsPlaylistSelectionEnable && playlistCheckboxStatus.ContainsValue(true))
            {
                <img src="./images/delete.svg" width="24" height="24" style="" @onclick="DeleteSelectedPlaylist" />
            }
        </div>
    </div>
    <div style="height: 10%;margin-top:10px;">
        <button class="btn-add-playlist" @onclick="ToggleAddPlayList">New playlist</button>
    </div>
    <div style="padding : 30px;">
        @foreach (var playlist in UserSetting.Instance.PlayList)
        {
            @if (IsPlaylistSelectionEnable)
            {
                <PlaylistElement IsChecked="@(playlistCheckboxStatus.ContainsKey(playlist.Key) && playlistCheckboxStatus[playlist.Key])" Clicked="() => ToggleSelection(playlist.Key)" PlaylistName="@playlist.Key" IsPlaylistSelectionEnable="true" ></PlaylistElement>
            }
            else
            {
                <PlaylistElement PlaylistName="@playlist.Key" Clicked="ShowPlaylistSongs" IsPlaylistSelectionEnable="true" IsPlaylistPage="true" Checked="() => ToggleSelection(playlist.Key)"></PlaylistElement>
            }
        }
    </div>
    @if(IsPlaylistSelectionEnable)
    {
        <div style="height: 10%; position:absolute ;bottom:10px; width:100%;">
            <button class="btn-done" @onclick="AddSongsInPlaylist">Done</button>
        </div>
    }
</Glass>
<div>
    <Scrollable OnCloseButtonClick="ToggleAddPlayList" IsActive="@isAddPlaylistVisible">
        <div class="scroll-child">
            <div style="height: 10%;">
                <p style="color:white;"><b>Give your playlist a name</b></p>
            </div>
            <div style="height: 30%;">
                <input @bind="playlistname" class="transparent-input" />
            </div>
            <div style="height: 10%;">
                <button class="btn" @onclick="AddPlayList">Create</button>
            </div>

        </div>
    </Scrollable>
    <Scrollable OnCloseButtonClick="() => isShowPlaylistSongsVisible = false" IsActive="@isShowPlaylistSongsVisible">
        <div style="margin-top:50px;padding:5px;">
                      
            <div style="display: flex;flex-direction: column;">
                <p style="font-size: 28px;"><b>@currentClickedPlaylistName</b></p>
                <p>Dhiraj Kumar</p>
            </div>

            <div style="margin-top:10px;">
                @if (UserSetting.Instance.PlayList.Count() > 0 && UserSetting.Instance.PlayList.ContainsKey(currentClickedPlaylistName))
                {
                    @foreach (var video in UserSetting.Instance.PlayList[currentClickedPlaylistName].Videos)
                    {
                        <MusicTrack Song="new AudioItem(video)"></MusicTrack>
                    }
                }
            </div>
        </div>
    </Scrollable>
</div>
@code 
{
    [Parameter]
    public Video? video { get; set; }
    [Parameter]
    public EventCallback OnOperationCompletedClicked { get; set; }
    [Parameter]
    public bool IsPlaylistSelectionEnable { get; set; } = false;

    private bool isAddPlaylistVisible = false;
    private bool isShowPlaylistSongsVisible = false;
    private Dictionary<string, bool> playlistCheckboxStatus = new Dictionary<string, bool>();
    public string currentClickedPlaylistName = "";

    private void ToggleAddPlayList()
    {
        isAddPlaylistVisible = !isAddPlaylistVisible;
        playlistname = GetPlayListDefaultName();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        playlistname = GetPlayListDefaultName();
    }

    private string? playlistname;

    private string GetPlayListDefaultName()
    {
        return "My Playlist #" + (UserSetting.Instance.PlayList.Count() + 1).ToString();
    }

    private void AddPlayList()
    {
        UserSetting.Instance.AddLocalPlaylist(playlistname!);
        playlistname = "";
        isAddPlaylistVisible = false;
    }

    private void ShowPlaylistSongs(string playlist)
    {
        isShowPlaylistSongsVisible = !isShowPlaylistSongsVisible;
        currentClickedPlaylistName = playlist;
    }

    private void AddToCheckboxStatus(string playlistName, bool isChecked)
    {
        if (playlistCheckboxStatus.ContainsKey(playlistName))
        {
            playlistCheckboxStatus[playlistname!] = isChecked;
        }
        else
        {
            playlistCheckboxStatus.Add(playlistName, isChecked);
        }

    }

    private async Task AddSongsInPlaylist()
    {
        foreach(var key in playlistCheckboxStatus.Keys)
        {
            if(playlistCheckboxStatus[key])
            {
                UserSetting.Instance.AddSongInLocalPlaylist(key, video!);
                playlistCheckboxStatus[key] = false;
            }
        }
        await OnOperationCompletedClicked.InvokeAsync();
    }

    private void ToggleSelection(string playlistName)
    {
        if (!playlistCheckboxStatus.ContainsKey(playlistName))
        {
            playlistCheckboxStatus.Add(playlistName, true);
        }
        else
        {
            playlistCheckboxStatus[playlistName] = !playlistCheckboxStatus[playlistName];
        }
    }

    private void DeleteSelectedPlaylist()
    {
        foreach (var key in playlistCheckboxStatus.Keys)
        {
            if (playlistCheckboxStatus[key])
            {
                UserSetting.Instance.RemovePlaylist(key);
                playlistCheckboxStatus.Remove(key);
            }
        }
    }
}
<style>
    .playlist-header {
        height: 50px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(66, 245, 209, 0.1);
    }

    .playlist-parent {
        height: calc(100vh - 64px);
        overflow-y: auto;
    }

    .playlist-header-toggle {
        height: 100% width: 100%;
        display: flex;
        align-items: center;
    }

    .add-playlist {
        margin: 20px;
    }

    .btn {
        background-color: #3bb63b;
        height: 50px;
        width: 115px;
        border-radius: 27px;
        font-size: 18px;
        font-weight: bold;
    }

    .btn-add-playlist
    {
        background-color: white;
        color: black;
        height: 45px;
        width: 150px;
        border-radius: 27px;
        font-size: 15px;
        font-weight: bold;
    }

    .btn-done
    {
        background-color: greenyellow;
        color: black;
        height: 45px;
        width: 110px;
        border-radius: 27px;
        font-size: 15px;
        font-weight: bold;
    }

    .scroll-child {
        height: 56%;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .transparent-input {
        width: 70%;
        height: 45px;
        background: transparent;
        border-bottom: 2px solid rgba(66, 245, 209,1);
        color: white;
        font-size: 30px;
        outline: none;
        font-weight: bold;
        text-align: center;
    }
</style>

