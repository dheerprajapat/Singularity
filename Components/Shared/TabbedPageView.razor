@inject IJSRuntime Runtime
@inject NavigationManager Nav
@inject HttpClient Http
@inject AudioManager AudioManager

<div id="glassTopHeader">
    <div style="height:60px;display:flex;justify-content:space-between;align-items:center;margin-left:8px;margin-right:8px;padding:4px;padding-top:8px">

    @if(!IsSearchPage)
    {
        <img src="./images/icon.svg" width="40" height="40"/>
        <div class="title">@Title</div>
        <img src="./images/search.svg" width="28" height="28" @onclick="GoToSearch" />
    }
    else
    {
        <MudAutocomplete T="string" Label="Search" Style="margin:16px" SearchFuncWithCancel="SuggestionsAsync" ValueChanged="(s)=>OnSearch.InvokeAsync(s)"
                   Immediate AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    }
    </div>

</div>
<div style="padding: @(Padding);height: calc(100vh - @(!isMusicViewInitialized?120:200)px);overflow-y: auto;scrollbar-width:none" class="scrollbar-hidden">
    @ChildContent
</div>


@code
{

    private const string SearchUrl = "https://clients1.google.com/complete/search?client=youtube&gs_ri=youtube&ds=yt&q=";


    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Padding { get; set; } = "10px";


    private bool IsSearchPage => Nav.Uri.EndsWith("search");

    private bool isMusicViewInitialized=false;

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        MusicView.OnMusicViewInit = () =>
        {
            isMusicViewInitialized = true;
            StateHasChanged();
        };
    }


    private void GoToSearch()
    {
        if(!IsSearchPage)
            Nav.NavigateTo("/search");
    }

    public async Task<IEnumerable<string>> SuggestionsAsync(string query, CancellationToken token = default)
    {
        var original = query;
        query = Uri.EscapeDataString(query);
        query = SearchUrl + query;
        var res = await Http.GetAsync(query, token);
        var js = await res.Content.ReadAsStringAsync(token);

        var parts = js.Split('[').Where(t => t.Split('"').Length > 2).Select(t => t.Split('"')[1]);

        return parts.Distinct().ToList();
    }
}


<style>
    
    .title {
        color: white;
        font-size: 22px;
        margin-left:0px;
    }
    #glassTopHeader
    {
        background-color: rgba(255, 245, 209,0.1);
        border: 1px solid rgba(235, 122, 52,0.5);
        backdrop-filter: blur(50px);
        margin-top: -10px;
        width: 100%;
        transform: translateZ(0);
    }

    .scrollbar-hidden::-webkit-scrollbar {
        display: none;
    }

    /* Hide scrollbar for IE, Edge add Firefox */
    .scrollbar-hidden {
        -ms-overflow-style: none;
        scrollbar-width: none; /* Firefox */
    }
</style>

